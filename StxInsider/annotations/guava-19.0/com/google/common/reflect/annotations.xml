<root>
    <item name='com.google.common.reflect.TypeResolver com.google.common.reflect.TypeResolver where(java.lang.reflect.Type, java.lang.reflect.Type) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap T putInstance(com.google.common.reflect.TypeToken&lt;T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Parameter A getDeclaredAnnotation(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeResolver com.google.common.reflect.TypeResolver where(java.lang.reflect.Type, java.lang.reflect.Type)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.Invokable&lt;T,java.lang.Object&gt; method(java.lang.reflect.Method)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; where(com.google.common.reflect.TypeParameter&lt;X&gt;, com.google.common.reflect.TypeToken&lt;X&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken boolean isSubtypeOf(java.lang.reflect.Type) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ClassPath.ResourceInfo java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ClassPath com.google.common.collect.ImmutableSet&lt;com.google.common.reflect.ClassPath.ClassInfo&gt; getTopLevelClasses(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap T getInstance(com.google.common.reflect.TypeToken&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; where(com.google.common.reflect.TypeParameter&lt;X&gt;, com.google.common.reflect.TypeToken&lt;X&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ClassPath com.google.common.collect.ImmutableSet&lt;com.google.common.reflect.ClassPath.ClassInfo&gt; getTopLevelClassesRecursive(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; of(java.lang.Class&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Parameter boolean isAnnotationPresent(java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken boolean isAssignableFrom(java.lang.reflect.Type) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; where(com.google.common.reflect.TypeParameter&lt;X&gt;, java.lang.Class&lt;X&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken java.lang.Object writeReplace()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ClassPath.ResourceInfo java.lang.String getResourceName()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.Invokable&lt;T,T&gt; constructor(java.lang.reflect.Constructor&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Reflection java.lang.String getPackageName(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Parameter A[] getDeclaredAnnotationsByType(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ClassPath com.google.common.reflect.ClassPath from(java.lang.ClassLoader)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; wrap()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Invokable com.google.common.reflect.Invokable&lt;T,T&gt; from(java.lang.reflect.Constructor&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken boolean isAssignableFrom(com.google.common.reflect.TypeToken&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap T getInstance(java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Reflection void initialize(java.lang.Class&lt;?&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken.TypeSet com.google.common.reflect.TypeToken&lt;T&gt;.TypeSet classes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Parameter A getAnnotation(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Invokable R invoke(T, java.lang.Object...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Invokable com.google.common.reflect.TypeToken&lt;? extends R&gt; getReturnType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToInstanceMap T getInstance(java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap T putInstance(com.google.common.reflect.TypeToken&lt;T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;?&gt; resolveType(java.lang.reflect.Type)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap java.lang.Object put(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.Reflection T newProxy(java.lang.Class&lt;T&gt;, java.lang.reflect.InvocationHandler) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap T putInstance(java.lang.Class&lt;T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt;.TypeSet getTypes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; where(com.google.common.reflect.TypeParameter&lt;X&gt;, java.lang.Class&lt;X&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap void putAll(java.util.Map&lt;? extends com.google.common.reflect.TypeToken&lt;? extends B&gt;,? extends B&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.TypeToInstanceMap T putInstance(java.lang.Class&lt;T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.Invokable&lt;T,T&gt; constructor(java.lang.reflect.Constructor&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap.Builder com.google.common.reflect.ImmutableTypeToInstanceMap.Builder&lt;B&gt; put(com.google.common.reflect.TypeToken&lt;T&gt;, T) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Invokable com.google.common.reflect.TypeToken&lt;T&gt; getOwnerType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Invokable com.google.common.reflect.Invokable&lt;T,R1&gt; returning(java.lang.Class&lt;R1&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken.TypeSet com.google.common.reflect.TypeToken&lt;T&gt;.TypeSet interfaces()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap.Builder com.google.common.reflect.ImmutableTypeToInstanceMap&lt;B&gt; build()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap.Builder com.google.common.reflect.ImmutableTypeToInstanceMap.Builder&lt;B&gt; put(java.lang.Class&lt;T&gt;, T) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap.Builder com.google.common.reflect.ImmutableTypeToInstanceMap.Builder&lt;B&gt; put(java.lang.Class&lt;T&gt;, T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap com.google.common.reflect.ImmutableTypeToInstanceMap.Builder&lt;B&gt; builder()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap T getInstance(com.google.common.reflect.TypeToken&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Invokable com.google.common.collect.ImmutableList&lt;com.google.common.reflect.Parameter&gt; getParameters()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap java.util.Map&lt;com.google.common.reflect.TypeToken&lt;? extends B&gt;,B&gt; delegate()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken boolean isSupertypeOf(com.google.common.reflect.TypeToken&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap java.lang.Object put(java.lang.Object, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.Invokable com.google.common.reflect.Invokable&lt;T,R1&gt; returning(com.google.common.reflect.TypeToken&lt;R1&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Invokable com.google.common.reflect.Invokable&lt;T,T&gt; from(java.lang.reflect.Constructor&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Reflection T newProxy(java.lang.Class&lt;T&gt;, java.lang.reflect.InvocationHandler) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToInstanceMap T getInstance(com.google.common.reflect.TypeToken&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;?&gt; resolveType(java.lang.reflect.Type) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; of(java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Invokable com.google.common.collect.ImmutableList&lt;com.google.common.reflect.TypeToken&lt;? extends java.lang.Throwable&gt;&gt; getExceptionTypes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ClassPath.ResourceInfo java.net.URL url()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap java.util.Set&lt;java.util.Map.Entry&lt;com.google.common.reflect.TypeToken&lt;? extends B&gt;,B&gt;&gt; entrySet()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap.Builder com.google.common.reflect.ImmutableTypeToInstanceMap.Builder&lt;B&gt; put(com.google.common.reflect.TypeToken&lt;T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToInstanceMap T putInstance(com.google.common.reflect.TypeToken&lt;T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap.Builder com.google.common.reflect.ImmutableTypeToInstanceMap.Builder&lt;B&gt; put(java.lang.Class&lt;T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Invokable com.google.common.reflect.Invokable&lt;?,java.lang.Object&gt; from(java.lang.reflect.Method) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ClassPath com.google.common.collect.ImmutableSet&lt;com.google.common.reflect.ClassPath.ClassInfo&gt; getTopLevelClasses(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Invokable com.google.common.reflect.Invokable&lt;T,R1&gt; returning(java.lang.Class&lt;R1&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeResolver com.google.common.reflect.TypeResolver where(java.lang.reflect.Type, java.lang.reflect.Type) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap T putInstance(java.lang.Class&lt;T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap.Builder com.google.common.reflect.ImmutableTypeToInstanceMap.Builder&lt;B&gt; put(com.google.common.reflect.TypeToken&lt;T&gt;, T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken boolean isSupertypeOf(java.lang.reflect.Type) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; unwrap()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; where(com.google.common.reflect.TypeParameter&lt;X&gt;, com.google.common.reflect.TypeToken&lt;X&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap T getInstance(java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Invokable com.google.common.reflect.Invokable&lt;T,R1&gt; returning(com.google.common.reflect.TypeToken&lt;R1&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Parameter A[] getAnnotationsByType(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;? super T&gt; getSupertype(java.lang.Class&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Reflection java.lang.String getPackageName(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; where(com.google.common.reflect.TypeParameter&lt;X&gt;, java.lang.Class&lt;X&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap com.google.common.reflect.ImmutableTypeToInstanceMap&lt;B&gt; of()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.Invokable&lt;T,java.lang.Object&gt; method(java.lang.reflect.Method) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeResolver java.lang.reflect.Type resolveType(java.lang.reflect.Type) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken boolean isSubtypeOf(com.google.common.reflect.TypeToken&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;?&gt; of(java.lang.reflect.Type) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap java.lang.Object delegate()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;?&gt; of(java.lang.reflect.Type)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Invokable com.google.common.reflect.Invokable&lt;?,java.lang.Object&gt; from(java.lang.reflect.Method)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ClassPath com.google.common.collect.ImmutableSet&lt;com.google.common.reflect.ClassPath.ClassInfo&gt; getTopLevelClassesRecursive(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
